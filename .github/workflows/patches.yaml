name: Apply Patches (GitLab + shithub)

on:
  schedule:
    - cron: '0 6 */1 * *'
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: checkoutRepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: applyPatches
        id: applyPatches
        run: |
          set -e

          git config user.name '󰬭 [CI] '
          git config user.email 'action@github.com'

          prBody=""
          hasChanges=false

          git fetch origin
          git checkout master
          
          gh pr close patches --delete-branch 2>/dev/null || true
          git push origin --delete patches 2>/dev/null || true
          git branch -D patches 2>/dev/null || true
          git checkout -B patches master

          mergeDirRepo() {
            dirPath="$1"
            repoUrl="$2"
            branchName="$3"
            [ -z "$branchName" ] && branchName="master"

            targetDir="${dirPath#./}"
            remoteName="remote_$(echo "$targetDir" | tr '/' '_')"

            git remote add "$remoteName" "$repoUrl" 2>/dev/null || true
            git fetch "$remoteName" "$branchName"

            oldHead=$(git rev-parse HEAD)

            if [ ! -d "$targetDir" ]; then
              git subtree add --prefix="$targetDir" "$remoteName" "$branchName" --squash
              hasChanges=true
              prBody="${prBody}* $repoUrl/$branchName → $targetDir"$'\n'
            else
              if git subtree pull --prefix="$targetDir" "$remoteName" "$branchName" --squash; then
                newHead=$(git rev-parse HEAD)
                if [ "$newHead" != "$oldHead" ]; then
                  prBody="${prBody}* $repoUrl/$branchName → $targetDir"$'\n'
                  hasChanges=true
                fi
              else
                echo "Merge conflict in $targetDir, aborting"
                git merge --abort 2>/dev/null || true
                git remote remove "$remoteName"
                return 1
              fi
            fi

            git remote remove "$remoteName"
          }

          mergeGitBranch() {
            remoteRepo="$1"
            remoteBranch="$2"

            headBefore=$(git rev-parse HEAD)
            tmpRemote="tmpRemote_$(date +%s%N)"
            
            git remote add "$tmpRemote" "$remoteRepo"
            git fetch "$tmpRemote" "$remoteBranch"
            
            if git merge --no-edit FETCH_HEAD; then
              git remote remove "$tmpRemote"
              headAfter=$(git rev-parse HEAD)
              if [ "$headAfter" != "$headBefore" ]; then
                prBody="${prBody}* $remoteRepo/$remoteBranch → patches"$'\n'
                hasChanges=true
              fi
            else
              git merge --abort
              git remote remove "$tmpRemote"
              return 1
            fi
          }

          prBody="Automatic PR bringing latest commits from:"$'\n\n'

          mergeDirRepo ./src/cmd/rio  git://shithub.us/nikita/rio  front
          mergeDirRepo ./src/cmd/acme git://shithub.us/nikita/acme front
          mergeDirRepo ./src/cmd/lola git://shithub.us/aap/lola    front

          mergeGitBranch https://gitlab.com/atamariya/plan9front.git dev

          if [ "$hasChanges" = false ]; then
            echo "No new commits to merge."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          echo "prBody<<EOF" >> "$GITHUB_OUTPUT"
          echo "$prBody" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"

          git push -f origin patches
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: openPullRequest
        if: steps.applyPatches.outputs.has_changes == 'true'
        run: |
          gh pr create \
            --base master \
            --head patches \
            --title "Sync patches" \
            --body "${{ steps.applyPatches.outputs.prBody }}" \
            || echo "PR already exists"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
