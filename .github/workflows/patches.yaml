name: Apply Patches (GitLab + shithub)

on:
  schedule:
    - cron: '0 6 */1 * *'   # daily at 06:00
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: checkoutRepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: applyPatches
        id: applyPatches
        run: |
          set -e

          git config user.name '󰬭 [CI] '
          git config user.email 'action@github.com'

          prBody=""
          hasChanges=false

          git fetch origin
          git checkout master
          
          # Close any existing patches PR and force-delete the branch
          git push origin --delete patches 2>/dev/null || true
          git branch -D patches 2>/dev/null || true
          git checkout -B patches master

          mergeDirRepo() {
            dir="$1"
            repo="$2"
            branch="$3"; [ -z "$branch" ] && branch="master"

            target="${dir#./}"
            remoteName="remote_$(echo "$target" | tr '/' '_')"

            # Add remote and fetch
            git remote add "$remoteName" "$repo" 2>/dev/null || true
            git fetch "$remoteName" "$branch"

            # Check if there are any changes
            if git diff --quiet "patches:$dir" "FETCH_HEAD:"; then
              git remote remove "$remoteName"
              return 0
            fi

            # Perform subtree merge
            git merge -s subtree --no-commit --allow-unrelated-histories "FETCH_HEAD" || {
              # If conflicts, abort and report
              git merge --abort
              git remote remove "$remoteName"
              return 1
            }

            git commit -m "Merge $repo ($branch) into $target" || true
            prBody="${prBody}* $repo/$branch → $target"$'\n'
            hasChanges=true

            git remote remove "$remoteName"
          }

          mergeGitBranch() {
            remoteRepo="$1"
            remoteBranch="$2"

            head=$(git rev-parse HEAD)
            tmpRemote="tmpRemote_$(date +%s%N)"
            
            git remote add "$tmpRemote" "$remoteRepo"
            git fetch "$tmpRemote" "$remoteBranch"
            git merge --no-edit FETCH_HEAD || {
              git merge --abort
              git remote remove "$tmpRemote"
              return 1
            }
            git remote remove "$tmpRemote"
            
            newhead=$(git rev-parse HEAD)
            if [ "$newhead" != "$head" ]; then
              prBody="${prBody}* $remoteRepo/$remoteBranch → patches"$'\n'
              hasChanges=true
            fi
          }

          prBody="Automatic PR bringing latest commits from:"$'\n\n'

          # --- patches ---
          mergeDirRepo ./src/cmd/rio  git://shithub.us/nikita/rio  front
          mergeDirRepo ./src/cmd/acme git://shithub.us/nikita/acme front
          mergeDirRepo ./src/cmd/lola git://shithub.us/aap/lola    front

          # --- branch-to-branch merge ---
          mergeGitBranch https://gitlab.com/atamariya/plan9front.git dev

          if [ "$hasChanges" = false ]; then
            echo "No new commits to merge."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          {
            echo "prBody<<EOF"
            echo "$prBody"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"

          git push -f origin patches

      - name: openPullRequest
        if: steps.applyPatches.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          base: master
          branch: patches
          title: "Sync patches"
          body: ${{ steps.applyPatches.outputs.prBody }}
          token: ${{ secrets.GITHUB_TOKEN }}
