name: Apply Patches (GitLab + shithub)

on:
  schedule:
    - cron: '0 6 */1 * *'   # daily at 06:00
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: checkoutRepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: applyPatches
        id: applyPatches
        run: |
          set -e

          git config user.name '󰬭 [CI] '
          git config user.email 'action@github.com'

          prBodyFile=".pr_body.txt"
          : > "$prBodyFile"
          echo "Automatic PR bringing latest commits from:" >> "$prBodyFile"

          git fetch origin
          git checkout master
          git branch -D patches 2>/dev/null || true
          git checkout -B patches master

          mergeDirRepo() {
            dir="$1"
            repo="$2"
            branch="$3"; [ -z "$branch" ] && branch="master"

            target="${dir#./}"
            prefix="${dir#./}/"

            tmpBranch="tmpMerge_$(echo "$target" | tr '/' '_')"
            git fetch "$repo" "$branch"
            git checkout -B "$tmpBranch" patches

            git read-tree --prefix="$prefix" -u FETCH_HEAD
            if git diff --cached --quiet; then
              git checkout patches
              git branch -D "$tmpBranch"
              return 0
            fi
            git commit -m "Subtree merge $repo ($branch) into $target"
            echo "* $repo/$branch → $target" >> "$prBodyFile"

            git checkout patches
            git merge "$tmpBranch"
            git branch -D "$tmpBranch"
          }

          mergeGitBranch() {
            remoteRepo="$1"
            remoteBranch="$2"

            head=$(git rev-parse HEAD)
            tmpRemote="tmpRemote_$(date +%s%N)"
            git remote add "$tmpRemote" "$remoteRepo"
            git fetch "$tmpRemote" "$remoteBranch"
            git merge FETCH_HEAD || true
            git remote remove "$tmpRemote"
            newhead=$(git rev-parse HEAD)
            if [ "$newhead" != "$head" ]; then
              echo "* $remoteRepo/$remoteBranch → patches" >> "$prBodyFile"
            fi
          }

          # --- patches ---
          mergeDirRepo ./src/cmd/rio  git://shithub.us/nikita/rio  front
          mergeDirRepo ./src/cmd/acme git://shithub.us/nikita/acme front
          mergeDirRepo ./src/cmd/lola git://shithub.us/aap/lola    front

          # --- branch-to-branch merge ---
          mergeGitBranch https://gitlab.com/atamariya/plan9front.git dev

          if ! grep -q '^\*' "$prBodyFile" 2>/dev/null; then
            echo "No new commits to merge."
            rm -f "$prBodyFile"
            exit 0
          fi

          echo "prBody<<EOF" >> "$GITHUB_OUTPUT"
          cat "$prBodyFile" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          rm -f "$prBodyFile"

          git push -f origin patches

      - name: openPullRequest
        if: steps.applyPatches.outcome == 'success'
        uses: peter-evans/create-pull-request@v5
        with:
          base: master
          branch: patches
          title: "Sync patches"
          body: ${{ steps.applyPatches.outputs.prBody }}
