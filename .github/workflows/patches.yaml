name: Apply Patches (GitLab + shithub)

on:
  schedule:
    - cron: '0 6 */1 * *'   # daily at 06:00
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    steps:
      - name: checkoutRepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: applyPatches
        id: applyPatches
        run: |
          set -e

          git config user.name '󰬭 [CI] '
          git config user.email 'action@github.com'

          prBody=""
          hasChanges=false

          git fetch origin
          git checkout master
          
          # Close any existing patches PR and force-delete the branch
          git push origin --delete patches 2>/dev/null || true
          git branch -D patches 2>/dev/null || true
          git checkout -B patches master

          mergeDirRepo() {
            dirPath="$1"
            repoUrl="$2"
            branchName="$3"; [ -z "$branchName" ] && branchName="master"

            targetDir="${dirPath#./}"
            remoteName="remote_$(echo "$targetDir" | tr '/' '_')"
            subtreePrefix="${targetDir%/}/"

            # Add remote and fetch
            git remote add "$remoteName" "$repoUrl" 2>/dev/null || true
            git fetch "$remoteName" "$branchName"

            headBefore=$(git rev-parse HEAD)

            # If directory doesn't exist, use read-tree for initial import
            if [ ! -d "$targetDir" ]; then
              git read-tree --prefix="$subtreePrefix" -u FETCH_HEAD
              if ! git diff --cached --quiet; then
                git commit -m "Import $repoUrl ($branchName) into $targetDir"
                prBody="${prBody}* $repoUrl/$branchName → $targetDir"$'\n'
                hasChanges=true
              fi
            else
              # Directory exists, do proper subtree merge
              git subtree pull --prefix="$subtreePrefix" "$remoteName" "$branchName" --squash -m "Merge $repoUrl ($branchName) into $targetDir" || {
                echo "Merge conflict in $targetDir, aborting"
                git merge --abort 2>/dev/null || true
                git remote remove "$remoteName"
                return 1
              }
              
              headAfter=$(git rev-parse HEAD)
              if [ "$headAfter" != "$headBefore" ]; then
                prBody="${prBody}* $repoUrl/$branchName → $targetDir"$'\n'
                hasChanges=true
              fi
            fi

            git remote remove "$remoteName"
          }

          mergeGitBranch() {
            remoteRepo="$1"
            remoteBranch="$2"

            headBefore=$(git rev-parse HEAD)
            tmpRemote="tmpRemote_$(date +%s%N)"
            
            git remote add "$tmpRemote" "$remoteRepo"
            git fetch "$tmpRemote" "$remoteBranch"
            git merge --no-edit FETCH_HEAD || {
              git merge --abort
              git remote remove "$tmpRemote"
              return 1
            }
            git remote remove "$tmpRemote"
            
            headAfter=$(git rev-parse HEAD)
            if [ "$headAfter" != "$headBefore" ]; then
              prBody="${prBody}* $remoteRepo/$remoteBranch → patches"$'\n'
              hasChanges=true
            fi
          }

          prBody="Automatic PR bringing latest commits from:"$'\n\n'

          # --- patches ---
          mergeDirRepo ./src/cmd/rio  git://shithub.us/nikita/rio  front
          mergeDirRepo ./src/cmd/acme git://shithub.us/nikita/acme front
          mergeDirRepo ./src/cmd/lola git://shithub.us/aap/lola    front

          # --- branch-to-branch merge (ephemeral, no persistent gitlab branch) ---
          mergeGitBranch https://gitlab.com/atamariya/plan9front.git dev

          if [ "$hasChanges" = false ]; then
            echo "No new commits to merge."
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Export PR body for the next step
          {
            echo "prBody<<EOF"
            echo "$prBody"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
          
          echo "has_changes=true" >> "$GITHUB_OUTPUT"

          git push -f origin patches

      - name: openPullRequest
        if: steps.applyPatches.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          base: master
          branch: patches
          title: "Sync patches"
          body: ${{ steps.applyPatches.outputs.prBody }}
